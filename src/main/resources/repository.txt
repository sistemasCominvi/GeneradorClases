package @paqueteDao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.BatchPreparedStatementSetter;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;
import @nameModel.@nameClase;

@Repository
public class Jdbc@nameClaseRepository extends JdbcGlobalRepository{;

    private final String tabla = "@project.dbo.@tableName";
    
    private final String insert = "INSERT INTO "+tabla+" "
    		+ "(@allFields) "
    		+ "values (@allQuestionFields)";
    

    public List<@nameClase> findAll() {
        return jdbcTemplate.query("SELECT * FROM " + tabla+ " where estatus > 0", new @nameClaseRowMapper());
    }


    public @nameClase findById(@primaryListKeysParameters) {
        return jdbcTemplate.queryForObject("SELECT * FROM " + tabla + " WHERE @primarySQLKeys, new @nameClaseRowMapper());
    }


    public @nameClase save(final @nameClase @nameClassMin) {
    
       	@keyHolder
        
        return @nameClassMin;
    }
    

    public Boolean saveAll(final List<@nameClase> @namePluralClass) {
        
        jdbcTemplate.batchUpdate(insert, new BatchPreparedStatementSetter() {
            @Override
            public void setValues(PreparedStatement ps, int i) throws SQLException {
                @nameClase @nameClassMin = @namePluralClass.get(i);
                @preparedSetStatement
            }

            @Override
            public int getBatchSize() {
                return @namePluralClass.size();
            }
        });
        
        return true;
    }
   

    public @nameClase update(final @nameClase @nameClassMin, @primaryListKeysParameters) {
        String sql = "UPDATE " + tabla + " SET @setScript  WHERE @primaryQuestionSQLKeys";
                
        jdbcTemplate.update(sql, new Object[] {
            @preparedGetStatement
        });
        
        return @nameClassMin;
    }


    public Boolean removeById(@primaryListKeysParameters) {
        String delete = "UPDATE " + tabla + " set estatus = 0 WHERE @primaryQuestionSQLKeys";
        jdbcTemplate.update(delete, new Object[]{@primaryNameKey});
        return true;
    }

    private static class @nameClaseRowMapper implements RowMapper<@nameClase> {

        @Override
        public @nameClase mapRow(ResultSet rs, int rowNum) throws SQLException {
        
        	@nameClase @nameClassMin = new @nameClase();
            @entityFromRS
            return @nameClassMin;
        }
    }
}